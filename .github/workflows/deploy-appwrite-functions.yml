name: Deploy Appwrite Functions

on:
  push:
    branches: [ main, master ]
    paths:
      - 'functions/**'
      - 'appwrite.json'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'functions/**'
      - 'appwrite.json'

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install Appwrite CLI
      run: |
        npm install -g appwrite-cli@latest
        appwrite --version
      
    - name: Verify environment variables
      run: |
        echo "üîç Checking environment variables..."
        
        # Check required variables
        if [ -z "${{ secrets.APPWRITE_ENDPOINT }}" ]; then
          echo "‚ùå APPWRITE_ENDPOINT is not set"
          echo "Please set this secret in GitHub repository settings"
          exit 1
        fi
        
        if [ -z "${{ secrets.APPWRITE_PROJECT_ID }}" ]; then
          echo "‚ùå APPWRITE_PROJECT_ID is not set"
          echo "Please set this secret in GitHub repository settings"
          exit 1
        fi
        
        # Check authentication method
        if [ -n "${{ secrets.APPWRITE_API_KEY }}" ]; then
          echo "‚úÖ Using API Key authentication (recommended)"
          echo "AUTH_METHOD=api_key" >> $GITHUB_ENV
        elif [ -n "${{ secrets.APPWRITE_EMAIL }}" ] && [ -n "${{ secrets.APPWRITE_PASSWORD }}" ]; then
          echo "‚ö†Ô∏è Using email/password authentication"
          echo "Consider switching to API Key for better security"
          echo "AUTH_METHOD=email_password" >> $GITHUB_ENV
        else
          echo "‚ùå No valid authentication method found"
          echo "Please set either:"
          echo "  - APPWRITE_API_KEY (recommended)"
          echo "  - APPWRITE_EMAIL and APPWRITE_PASSWORD"
          exit 1
        fi
        
        echo "‚úÖ Environment validation completed"
      
    - name: Login to Appwrite (API Key)
      if: env.AUTH_METHOD == 'api_key'
      run: |
        echo "üîê Authenticating with API Key..."
        appwrite client \
          --endpoint "${{ secrets.APPWRITE_ENDPOINT }}" \
          --project-id "${{ secrets.APPWRITE_PROJECT_ID }}" \
          --key "${{ secrets.APPWRITE_API_KEY }}"
        echo "‚úÖ API Key authentication successful"
      
    - name: Login to Appwrite (Email/Password)
      if: env.AUTH_METHOD == 'email_password'
      run: |
        echo "üîê Authenticating with email/password..."
        appwrite login \
          --endpoint "${{ secrets.APPWRITE_ENDPOINT }}" \
          --email "${{ secrets.APPWRITE_EMAIL }}" \
          --password "${{ secrets.APPWRITE_PASSWORD }}"
        
        echo "üéØ Setting project..."
        appwrite client set-project "${{ secrets.APPWRITE_PROJECT_ID }}"
        echo "‚úÖ Email/password authentication successful"
      
    - name: Verify connection
      run: |
        echo "üîó Verifying Appwrite connection..."
        appwrite client --version
        echo "‚úÖ Connection verified"
      
    - name: Deploy Functions
      run: |
        echo "üöÄ Starting function deployment..."
        
        # Function deployment with error handling
        deploy_function() {
          local func_id=$1
          local func_name=$2
          local func_path=$3
          
          echo "üì¶ Deploying $func_name function..."
          
          if appwrite functions create-deployment \
            --function-id "$func_id" \
            --entrypoint "src/main.js" \
            --code "$func_path" \
            --activate true; then
            echo "‚úÖ $func_name deployed successfully"
          else
            echo "‚ùå Failed to deploy $func_name"
            return 1
          fi
        }
        
        # Deploy all functions
        deploy_function "send-verification" "Send Verification Email" "functions/send-verification-email"
        deploy_function "cleanup-expired-codes" "Cleanup Expired Codes" "functions/cleanup-expired-codes"  
        deploy_function "get-user-stats" "Get User Statistics" "functions/get-user-stats"
        
        echo "üéâ All functions deployed successfully!"
        
    - name: Verify deployments
      run: |
        echo "üîç Verifying function deployments..."
        
        # Check each function
        for func_id in "send-verification" "cleanup-expired-codes" "get-user-stats"; do
          echo "Checking $func_id..."
          if appwrite functions get --function-id "$func_id" > /dev/null 2>&1; then
            echo "‚úÖ $func_id is active"
          else
            echo "‚ùå $func_id verification failed"
          fi
        done
        
        echo "‚úÖ Deployment verification completed"
        
    - name: Deployment summary
      if: always()
      run: |
        echo "üìä Deployment Summary"
        echo "===================="
        echo "Repository: ${{ github.repository }}"
        echo "Branch: ${{ github.ref_name }}"
        echo "Commit: ${{ github.sha }}"
        echo "Trigger: ${{ github.event_name }}"
        echo "Auth Method: ${{ env.AUTH_METHOD }}"
        
        if [ "${{ job.status }}" == "success" ]; then
          echo "Status: ‚úÖ SUCCESS"
          echo ""
          echo "üéâ All Appwrite functions have been deployed successfully!"
          echo "You can verify the deployments in the Appwrite console."
        else
          echo "Status: ‚ùå FAILED"
          echo ""
          echo "üí° Troubleshooting tips:"
          echo "1. Check GitHub Secrets are properly set"
          echo "2. Verify Appwrite credentials and permissions"
          echo "3. Review the deployment logs above"
          echo "4. See docs/GITHUB_SECRETS_SETUP.md for detailed setup guide"
        fi 