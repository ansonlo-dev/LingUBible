name: Create Release and Deploy

on:
  push:
    tags:
      - 'v*'  # Áï∂Êé®ÈÄÅ v* Ê®ôÁ±§ÊôÇËß∏Áôº

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build project
      run: npm run build
      env:
        VITE_APPWRITE_ENDPOINT: ${{ secrets.VITE_APPWRITE_ENDPOINT }}
        VITE_APPWRITE_PROJECT_ID: ${{ secrets.VITE_APPWRITE_PROJECT_ID }}
        VITE_APP_ENV: production
        VITE_DEV_MODE: false
        VITE_DEV_BYPASS_PASSWORD: false
        
    - name: Get version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      
    - name: Get package version
      id: package_version
      run: |
        PACKAGE_VERSION=$(node -e "
        import fs from 'fs';
        const pkg = JSON.parse(fs.readFileSync('./package.json', 'utf8'));
        console.log(pkg.version);
        ")
        echo "PACKAGE_VERSION=$PACKAGE_VERSION" >> $GITHUB_OUTPUT
      
    - name: Determine release type
      id: release_type
      run: |
        if [[ "${{ steps.package_version.outputs.PACKAGE_VERSION }}" =~ ^0\. ]]; then
          echo "PRERELEASE=true" >> $GITHUB_OUTPUT
          echo "RELEASE_NAME=Beta ${{ steps.package_version.outputs.PACKAGE_VERSION }}" >> $GITHUB_OUTPUT
        else
          echo "PRERELEASE=false" >> $GITHUB_OUTPUT
          echo "RELEASE_NAME=Version ${{ steps.package_version.outputs.PACKAGE_VERSION }}" >> $GITHUB_OUTPUT
        fi
        
    - name: Generate changelog
      id: changelog
      run: |
        # Á∞°ÂñÆÁöÑ changelog ÁîüÊàê
        echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
        echo "## üöÄ Êñ∞ÂäüËÉΩÂíåÊîπÈÄ≤" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "### ‚ú® ‰∏ªË¶ÅÊõ¥Êñ∞" >> $GITHUB_OUTPUT
        echo "- ÁâàÊú¨Êõ¥Êñ∞Ëá≥ ${{ steps.package_version.outputs.PACKAGE_VERSION }}" >> $GITHUB_OUTPUT
        echo "- ÊÄßËÉΩÂÑ™ÂåñÂíåÈåØË™§‰øÆÂæ©" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "### üîß ÊäÄË°ìÊîπÈÄ≤" >> $GITHUB_OUTPUT
        echo "- Ëá™ÂãïÂåñÈÉ®ÁΩ≤ÊµÅÁ®ã" >> $GITHUB_OUTPUT
        echo "- ‰ª£Á¢ºË≥™ÈáèÊèêÂçá" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "### üì± Áî®Êà∂È´îÈ©ó" >> $GITHUB_OUTPUT
        echo "- UI/UX ÂÑ™Âåñ" >> $GITHUB_OUTPUT
        echo "- ÈüøÊáâÂºèË®≠Ë®àÊîπÈÄ≤" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "---" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "üåê **Á∑ö‰∏äÈ´îÈ©ó**: [lingubible.com](https://lingubible.com)" >> $GITHUB_OUTPUT
        echo "üìö **ÊñáÊ™î**: [ÈÉ®ÁΩ≤ÊåáÂçó](https://github.com/${{ github.repository }}/tree/main/docs)" >> $GITHUB_OUTPUT
        echo "üêõ **ÂïèÈ°åÂõûÂ†±**: [GitHub Issues](https://github.com/${{ github.repository }}/issues)" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
    - name: Create build archive
      run: |
        cd dist
        zip -r ../lingubible-${{ steps.package_version.outputs.PACKAGE_VERSION }}-build.zip .
        cd ..
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.VERSION }}
        name: ${{ steps.release_type.outputs.RELEASE_NAME }}
        body: ${{ steps.changelog.outputs.CHANGELOG }}
        draft: false
        prerelease: ${{ steps.release_type.outputs.PRERELEASE }}
        files: |
          lingubible-${{ steps.package_version.outputs.PACKAGE_VERSION }}-build.zip 