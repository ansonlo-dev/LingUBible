name: Create Release and Deploy

on:
  push:
    tags:
      - 'v*'  # 當推送 v* 標籤時觸發

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Get version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      
    - name: Get package version
      id: package_version
      run: |
        PACKAGE_VERSION=$(node -e "
        import fs from 'fs';
        const pkg = JSON.parse(fs.readFileSync('./package.json', 'utf8'));
        console.log(pkg.version);
        ")
        echo "PACKAGE_VERSION=$PACKAGE_VERSION" >> $GITHUB_OUTPUT
        echo "📦 Package version: $PACKAGE_VERSION"
      
    - name: Determine release type
      id: release_type
      run: |
        if [[ "${{ steps.package_version.outputs.PACKAGE_VERSION }}" =~ ^0\. ]]; then
          echo "PRERELEASE=true" >> $GITHUB_OUTPUT
          echo "RELEASE_NAME=Beta ${{ steps.package_version.outputs.PACKAGE_VERSION }}" >> $GITHUB_OUTPUT
          echo "🎯 Release type: Pre-release (Beta)"
        else
          echo "PRERELEASE=false" >> $GITHUB_OUTPUT
          echo "RELEASE_NAME=Version ${{ steps.package_version.outputs.PACKAGE_VERSION }}" >> $GITHUB_OUTPUT
          echo "🎯 Release type: Stable"
        fi
        
    - name: Generate changelog
      id: changelog
      run: |
        # 簡單的 changelog 生成
        echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
        echo "## 🚀 新功能和改進" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "### ✨ 主要更新" >> $GITHUB_OUTPUT
        echo "- 版本更新至 ${{ steps.package_version.outputs.PACKAGE_VERSION }}" >> $GITHUB_OUTPUT
        echo "- PWA 版本同步功能" >> $GITHUB_OUTPUT
        echo "- 多語言版本徽章支援" >> $GITHUB_OUTPUT
        echo "- 性能優化和錯誤修復" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "### 🔧 技術改進" >> $GITHUB_OUTPUT
        echo "- 自動化版本管理系統" >> $GITHUB_OUTPUT
        echo "- GitHub API 集成" >> $GITHUB_OUTPUT
        echo "- 動態 PWA Manifest 生成" >> $GITHUB_OUTPUT
        echo "- 代碼質量提升" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "### 📱 用戶體驗" >> $GITHUB_OUTPUT
        echo "- 版本信息實時同步" >> $GITHUB_OUTPUT
        echo "- 多語言 PWA 支援" >> $GITHUB_OUTPUT
        echo "- UI/UX 優化" >> $GITHUB_OUTPUT
        echo "- 響應式設計改進" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "---" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "🌐 **線上體驗**: [lingubible.com](https://lingubible.com)" >> $GITHUB_OUTPUT
        echo "📚 **文檔**: [部署指南](https://github.com/${{ github.repository }}/tree/main/docs)" >> $GITHUB_OUTPUT
        echo "🐛 **問題回報**: [GitHub Issues](https://github.com/${{ github.repository }}/issues)" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
    - name: Try to build project (optional)
      continue-on-error: true
      run: |
        echo "🔨 嘗試構建項目..."
        if npm run build; then
          echo "✅ 構建成功"
          echo "BUILD_SUCCESS=true" >> $GITHUB_ENV
        else
          echo "⚠️ 構建失敗，但繼續創建 Release"
          echo "BUILD_SUCCESS=false" >> $GITHUB_ENV
        fi
      env:
        VITE_APPWRITE_ENDPOINT: ${{ secrets.VITE_APPWRITE_ENDPOINT || 'https://cloud.appwrite.io/v1' }}
        VITE_APPWRITE_PROJECT_ID: ${{ secrets.VITE_APPWRITE_PROJECT_ID || 'default' }}
        VITE_APP_ENV: production
        VITE_DEV_MODE: false
        VITE_DEV_BYPASS_PASSWORD: false
        
    - name: Create build archive (if build succeeded)
      if: env.BUILD_SUCCESS == 'true'
      run: |
        echo "📦 創建構建檔案..."
        cd dist
        zip -r ../lingubible-${{ steps.package_version.outputs.PACKAGE_VERSION }}-build.zip .
        cd ..
        echo "✅ 構建檔案已創建"
        
    - name: Create Release
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.VERSION }}
        name: ${{ steps.release_type.outputs.RELEASE_NAME }}
        body: ${{ steps.changelog.outputs.CHANGELOG }}
        draft: false
        prerelease: ${{ steps.release_type.outputs.PRERELEASE }}
        files: |
          lingubible-${{ steps.package_version.outputs.PACKAGE_VERSION }}-build.zip
        fail_on_unmatched_files: false
        
    - name: Release created successfully
      run: |
        echo "🎉 GitHub Release 創建成功！"
        echo "📦 版本: ${{ steps.package_version.outputs.PACKAGE_VERSION }}"
        echo "🏷️ 標籤: ${{ steps.get_version.outputs.VERSION }}"
        echo "📋 名稱: ${{ steps.release_type.outputs.RELEASE_NAME }}"
        echo "🔗 URL: https://github.com/${{ github.repository }}/releases/tag/${{ steps.get_version.outputs.VERSION }}" 