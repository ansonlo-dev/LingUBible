# 開發模式測試指南

## 🚀 快速測試流程

### 0. 前置設置（重要！）

#### 前端設置
確認 `.env` 檔案包含：
```bash
VITE_DEV_MODE=true
VITE_DEV_BYPASS_PASSWORD=true
```

#### 後端設置（必須完成！）
1. 訪問 [Appwrite 控制台](https://cloud.appwrite.io/)
2. 進入 `lingubible` 專案
3. 點擊 **Functions** → **Send Verification Email** → **Settings**
4. 在 **Environment variables** 部分添加：
   ```
   Key: DEV_MODE
   Value: true
   ```
5. 點擊 **Update** 保存

**⚠️ 如果沒有設置後端環境變數，註冊仍然會失敗！**

### 1. 確認開發模式已啟用
- 訪問 http://localhost:8081
- 檢查右上角是否顯示黃色的開發模式指示器
- 指示器應該顯示：
  - ✅ 任何郵件域名可註冊
  - ✅ 密碼強度檢查已繞過

### 2. 註冊測試步驟

#### 步驟 1：訪問註冊頁面
```
http://localhost:8081/register
```

#### 步驟 2：輸入測試郵件
使用任何有效的郵件格式，例如：
```
test@gmail.com
user@example.com
demo@outlook.com
```

#### 步驟 3：自動驗證（開發模式）
1. 點擊"發送驗證碼"按鈕
2. **開發模式下會自動完成驗證**（約 0.5 秒後）
3. 您應該看到綠色的"驗證已自動完成"訊息

#### 步驟 4：輸入用戶名
輸入任何 3 個字符以上的用戶名，例如：
```
testuser
demo123
myusername
```
**開發模式下會自動設置為有效**

#### 步驟 5：輸入密碼
輸入任何密碼，例如：
```
123
a
password
test
```
**開發模式下會顯示"密碼強度檢查已繞過"**

**重要說明**：在開發模式下，如果您輸入的密碼不符合 Appwrite 的安全要求（少於8個字符或常見密碼），系統會自動使用一個安全的預設密碼來創建帳戶。登入時，系統會先嘗試您輸入的密碼，如果失敗則自動嘗試預設密碼。

#### 步驟 6：確認密碼
重複輸入相同的密碼

#### 步驟 7：同意條款
勾選"我同意服務條款和隱私政策"

#### 步驟 8：註冊
點擊"註冊"按鈕 - **現在應該可以點擊並成功註冊了！**

## 🔍 故障排除

### 註冊按鈕仍然無法點擊？

檢查以下條件是否都滿足：

1. **郵件驗證狀態**
   - 應該顯示綠色的"驗證已自動完成"訊息
   - 如果沒有，請重新點擊"發送驗證碼"

2. **用戶名狀態**
   - 用戶名至少 3 個字符
   - 開發模式下應該自動顯示為有效

3. **密碼狀態**
   - 密碼欄位不為空
   - 應該顯示"密碼強度檢查已繞過"
   - 確認密碼與密碼相同

4. **條款同意**
   - 必須勾選"我同意服務條款和隱私政策"

### 註冊失敗：密碼不符合要求

如果看到類似 "Password must be between 8 and 265 characters long" 的錯誤：

1. **檢查後端開發模式**：
   - 確認 Appwrite Function 的 `DEV_MODE=true` 環境變數已設置
   - 檢查 Function 日誌是否顯示 `🔧 開發模式：使用預設密碼創建帳戶`

2. **重新部署 Function**：
   ```bash
   npx appwrite push functions
   ```

3. **前端修復**：
   - 最新版本已修復開發模式下的密碼錯誤顯示問題
   - 在開發模式下，即使後端使用預設密碼，前端也不會顯示密碼長度錯誤

4. **登入問題**：
   - 如果註冊成功但登入失敗，系統會自動嘗試預設密碼
   - 檢查瀏覽器控制台是否顯示 `🔧 開發模式：預設密碼登入成功`

### 註冊失敗：「請先驗證您的嶺南人郵件地址」

這表示後端的開發模式未啟用：

1. **檢查 Appwrite Function 環境變數**：
   - 訪問 [Appwrite 控制台](https://cloud.appwrite.io/)
   - Functions → Send Verification Email → Settings
   - 確認有 `DEV_MODE=true` 環境變數

2. **重新部署 Function**：
   ```bash
   npx appwrite push functions
   ```

3. **檢查 Function 日誌**：
   - 在 Appwrite 控制台的 Functions → Send Verification Email → Logs
   - 查看是否有 `🔧 開發模式：跳過郵件驗證檢查` 訊息

### 開發模式指示器未顯示？

1. 檢查前端 `.env` 檔案：
```bash
VITE_DEV_MODE=true
VITE_DEV_BYPASS_PASSWORD=true
```

2. 重新啟動開發伺服器：
```bash
npm run dev
```

3. 清除瀏覽器緩存並重新載入頁面

### 郵件驗證未自動完成？

1. 檢查瀏覽器控制台是否有錯誤
2. 確認看到以下日誌：
```
🔧 開發模式：繞過郵件驗證
🔧 開發模式：自動完成驗證
```

3. 如果沒有自動完成，手動輸入任何 6 位數字（如 123456）並點擊驗證

## 📝 預期的開發模式行為

### 自動化功能
- ✅ 郵件驗證自動完成（0.5 秒後）
- ✅ 密碼強度檢查自動繞過
- ✅ 用戶名驗證自動通過（3+ 字符）
- ✅ 後端跳過郵件驗證檢查

### 手動操作
- 📝 輸入郵件地址
- 📝 點擊"發送驗證碼"
- 📝 輸入用戶名
- 📝 輸入密碼
- 📝 確認密碼
- 📝 勾選同意條款
- 📝 點擊註冊

### 視覺指示
- 🟡 右上角開發模式指示器
- 🟢 "驗證已自動完成"訊息
- 🟢 "密碼強度檢查已繞過"訊息
- 🟢 用戶名有效指示

## 🧪 完整測試案例

### 測試案例 1：Gmail 郵件
```
郵件：test@gmail.com
用戶名：testuser
密碼：123
確認密碼：123
條款：✅ 同意
預期：註冊成功
```

### 測試案例 2：一次性郵件
```
郵件：temp@10minutemail.com
用戶名：tempuser
密碼：a
確認密碼：a
條款：✅ 同意
預期：註冊成功
```

### 測試案例 3：最短輸入
```
郵件：a@b.com
用戶名：abc
密碼：1
確認密碼：1
條款：✅ 同意
預期：註冊成功
```

## 🔄 重置測試環境

如果需要重置測試環境：

1. 清除瀏覽器的 localStorage：
```javascript
localStorage.clear()
```

2. 重新載入頁面

3. 重新開始測試流程

## 📞 如果仍然有問題

1. **檢查前端**：瀏覽器控制台的錯誤訊息
2. **檢查後端**：Appwrite Function 的執行日誌
3. **確認設置**：前端和後端的開發模式都已啟用
4. **重新部署**：Function 和前端應用
5. **嘗試無痕模式**：排除瀏覽器緩存問題

## 📋 設置檢查清單

- [ ] 前端 `.env` 檔案設置 `VITE_DEV_MODE=true`
- [ ] 前端 `.env` 檔案設置 `VITE_DEV_BYPASS_PASSWORD=true`
- [ ] Appwrite Function 環境變數設置 `DEV_MODE=true`
- [ ] Function 已重新部署
- [ ] 開發伺服器已重新啟動
- [ ] 瀏覽器緩存已清除

---

**注意：這些功能僅在開發模式下可用。生產環境請務必關閉開發模式。** 